// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRole = `-- name: CreateRole :one
insert into roles(id, role_name, created_at, updated_at)
values(
    gen_random_uuid(),
    $1,
    NOW(),
    NOW()
)
returning id, role_name, created_at, updated_at
`

func (q *Queries) CreateRole(ctx context.Context, roleName string) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, roleName)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleById = `-- name: GetRoleById :one
select id, role_name, created_at, updated_at from roles where id = $1
`

func (q *Queries) GetRoleById(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleById, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.RoleName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleIdByName = `-- name: GetRoleIdByName :one
select id from roles where role_name = $1
`

func (q *Queries) GetRoleIdByName(ctx context.Context, roleName string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getRoleIdByName, roleName)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const removeRole = `-- name: RemoveRole :exec
delete from roles where id = $1
`

func (q *Queries) RemoveRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeRole, id)
	return err
}

const updateRoleById = `-- name: UpdateRoleById :one
update roles set role_name = $1, updated_at = NOW() where id = $2
returning role_name
`

type UpdateRoleByIdParams struct {
	RoleName string
	ID       uuid.UUID
}

func (q *Queries) UpdateRoleById(ctx context.Context, arg UpdateRoleByIdParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateRoleById, arg.RoleName, arg.ID)
	var role_name string
	err := row.Scan(&role_name)
	return role_name, err
}
