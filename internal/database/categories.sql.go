// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
insert into categories(id, category, created_at, updated_at)
values(
    gen_random_uuid(),
    $1,
    NOW(),
    NOW()
)
returning category, created_at, updated_at
`

type CreateCategoryRow struct {
	Category  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateCategory(ctx context.Context, category string) (CreateCategoryRow, error) {
	row := q.db.QueryRowContext(ctx, createCategory, category)
	var i CreateCategoryRow
	err := row.Scan(&i.Category, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getAllCategories = `-- name: GetAllCategories :many
select id, category, created_at, updated_at from categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryIDByName = `-- name: GetCategoryIDByName :one
select id from categories where category = $1
`

func (q *Queries) GetCategoryIDByName(ctx context.Context, category string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCategoryIDByName, category)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const removeCategory = `-- name: RemoveCategory :exec
delete from categories where id = $1
`

func (q *Queries) RemoveCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeCategory, id)
	return err
}

const updateCategory = `-- name: UpdateCategory :one
update categories set category = $1, updated_at = NOW() where id = $2
returning category, created_at, updated_at
`

type UpdateCategoryParams struct {
	Category string
	ID       uuid.UUID
}

type UpdateCategoryRow struct {
	Category  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (UpdateCategoryRow, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, arg.Category, arg.ID)
	var i UpdateCategoryRow
	err := row.Scan(&i.Category, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
