// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: blogs.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createBlog = `-- name: CreateBlog :one
insert into blogs(
    id, title, brief, content_url,
    images, thumbnail_url, code_repo_link, tags,
    author, category, created_at, updated_at
) values(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    NOW(),
    NOW()
)
returning id, title, brief, content_url, images, thumbnail_url, code_repo_link, views, likes, tags, author, category, created_at, updated_at
`

type CreateBlogParams struct {
	Title        string
	Brief        string
	ContentUrl   string
	Images       []json.RawMessage
	ThumbnailUrl string
	CodeRepoLink string
	Tags         string
	Author       uuid.UUID
	Category     uuid.UUID
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, createBlog,
		arg.Title,
		arg.Brief,
		arg.ContentUrl,
		pq.Array(arg.Images),
		arg.ThumbnailUrl,
		arg.CodeRepoLink,
		arg.Tags,
		arg.Author,
		arg.Category,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Brief,
		&i.ContentUrl,
		pq.Array(&i.Images),
		&i.ThumbnailUrl,
		&i.CodeRepoLink,
		&i.Views,
		&i.Likes,
		&i.Tags,
		&i.Author,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllBlogsByCategory = `-- name: GetAllBlogsByCategory :many
select 
id, title, brief,
thumbnail_url, views, likes,
tags, created_at from blogs where category = $1 and id > $2 limit $3
`

type GetAllBlogsByCategoryParams struct {
	Category uuid.UUID
	ID       uuid.UUID
	Limit    int32
}

type GetAllBlogsByCategoryRow struct {
	ID           uuid.UUID
	Title        string
	Brief        string
	ThumbnailUrl string
	Views        int32
	Likes        int32
	Tags         string
	CreatedAt    time.Time
}

func (q *Queries) GetAllBlogsByCategory(ctx context.Context, arg GetAllBlogsByCategoryParams) ([]GetAllBlogsByCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllBlogsByCategory, arg.Category, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBlogsByCategoryRow
	for rows.Next() {
		var i GetAllBlogsByCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Brief,
			&i.ThumbnailUrl,
			&i.Views,
			&i.Likes,
			&i.Tags,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogByID = `-- name: GetBlogByID :one
select
blogs.title, blogs.content_url, blogs.images,
blogs.code_repo_link, blogs.views, blogs.likes,
blogs.tags, users.username, blogs.created_at
from blogs join users on blogs.author = users.id where blogs.id = $1
`

type GetBlogByIDRow struct {
	Title        string
	ContentUrl   string
	Images       []json.RawMessage
	CodeRepoLink string
	Views        int32
	Likes        int32
	Tags         string
	Username     string
	CreatedAt    time.Time
}

func (q *Queries) GetBlogByID(ctx context.Context, id uuid.UUID) (GetBlogByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getBlogByID, id)
	var i GetBlogByIDRow
	err := row.Scan(
		&i.Title,
		&i.ContentUrl,
		pq.Array(&i.Images),
		&i.CodeRepoLink,
		&i.Views,
		&i.Likes,
		&i.Tags,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const removeBlog = `-- name: RemoveBlog :exec
delete from blogs where id = $1
`

func (q *Queries) RemoveBlog(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeBlog, id)
	return err
}

const updateBlog = `-- name: UpdateBlog :exec
update blogs set
title = $1, brief = $2, content_url = $3,
thumbnail_url = $4, code_repo_link = $5,
category = $6, updated_at = NOW() where id = $7
`

type UpdateBlogParams struct {
	Title        string
	Brief        string
	ContentUrl   string
	ThumbnailUrl string
	CodeRepoLink string
	Category     uuid.UUID
	ID           uuid.UUID
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) error {
	_, err := q.db.ExecContext(ctx, updateBlog,
		arg.Title,
		arg.Brief,
		arg.ContentUrl,
		arg.ThumbnailUrl,
		arg.CodeRepoLink,
		arg.Category,
		arg.ID,
	)
	return err
}

const updateBlogTags = `-- name: UpdateBlogTags :exec
update blogs set tags = $1, updated_at = NOW() where id = $2
`

type UpdateBlogTagsParams struct {
	Tags string
	ID   uuid.UUID
}

func (q *Queries) UpdateBlogTags(ctx context.Context, arg UpdateBlogTagsParams) error {
	_, err := q.db.ExecContext(ctx, updateBlogTags, arg.Tags, arg.ID)
	return err
}

const updateImages = `-- name: UpdateImages :exec
update blogs set images = $1, updated_at = NOW() where id = $2
`

type UpdateImagesParams struct {
	Images []json.RawMessage
	ID     uuid.UUID
}

func (q *Queries) UpdateImages(ctx context.Context, arg UpdateImagesParams) error {
	_, err := q.db.ExecContext(ctx, updateImages, pq.Array(arg.Images), arg.ID)
	return err
}
