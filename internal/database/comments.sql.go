// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comments.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
insert into comments(
    id, description, user_id, blog_id,
    created_at, updated_at
) values(
    gen_random_uuid(),
    $1, $2, $3, NOW(), NOW()
)
returning id, description, likes, user_id, blog_id, created_at, updated_at
`

type CreateCommentParams struct {
	Description string
	UserID      uuid.UUID
	BlogID      uuid.UUID
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Description, arg.UserID, arg.BlogID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Likes,
		&i.UserID,
		&i.BlogID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCommentByBlogID = `-- name: GetCommentByBlogID :many
select
comments.id, comments.description, users.username,
users.profile_pic_url, comments.created_at, comments.updated_at
from comments join users on comments.user_id = users.id where comments.blog_id = $1
`

type GetCommentByBlogIDRow struct {
	ID            uuid.UUID
	Description   string
	Username      string
	ProfilePicUrl string
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) GetCommentByBlogID(ctx context.Context, blogID uuid.UUID) ([]GetCommentByBlogIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentByBlogID, blogID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentByBlogIDRow
	for rows.Next() {
		var i GetCommentByBlogIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Username,
			&i.ProfilePicUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeComment = `-- name: RemoveComment :exec
delete from comments where id = $1 and user_id = $2
`

type RemoveCommentParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) RemoveComment(ctx context.Context, arg RemoveCommentParams) error {
	_, err := q.db.ExecContext(ctx, removeComment, arg.ID, arg.UserID)
	return err
}

const updateCommentByID = `-- name: UpdateCommentByID :one
update comments set description = $1, updated_at = NOW() where id = $2 and user_id = $3
returning description, updated_at
`

type UpdateCommentByIDParams struct {
	Description string
	ID          uuid.UUID
	UserID      uuid.UUID
}

type UpdateCommentByIDRow struct {
	Description string
	UpdatedAt   time.Time
}

func (q *Queries) UpdateCommentByID(ctx context.Context, arg UpdateCommentByIDParams) (UpdateCommentByIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateCommentByID, arg.Description, arg.ID, arg.UserID)
	var i UpdateCommentByIDRow
	err := row.Scan(&i.Description, &i.UpdatedAt)
	return i, err
}
