// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: books.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createBook = `-- name: CreateBook :one
insert into books(
    id, name, cover_image_url,review,
    tags, level, created_at, updated_at
) values(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    NOW(),
    NOW()
)
returning id, name, cover_image_url, review, level, created_at, updated_at, tags
`

type CreateBookParams struct {
	Name          string
	CoverImageUrl string
	Review        string
	Tags          []string
	Level         uuid.UUID
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Name,
		arg.CoverImageUrl,
		arg.Review,
		pq.Array(arg.Tags),
		arg.Level,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CoverImageUrl,
		&i.Review,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Tags),
	)
	return i, err
}

const getAllBooks = `-- name: GetAllBooks :many
select id, name, cover_image_url from books
`

type GetAllBooksRow struct {
	ID            uuid.UUID
	Name          string
	CoverImageUrl string
}

func (q *Queries) GetAllBooks(ctx context.Context) ([]GetAllBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBooksRow
	for rows.Next() {
		var i GetAllBooksRow
		if err := rows.Scan(&i.ID, &i.Name, &i.CoverImageUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBooksCount = `-- name: GetAllBooksCount :one
select count(*) from books
`

func (q *Queries) GetAllBooksCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAllBooksCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getBookByID = `-- name: GetBookByID :one
select name, cover_image_url, review, tags, level from books where id = $1
`

type GetBookByIDRow struct {
	Name          string
	CoverImageUrl string
	Review        string
	Tags          []string
	Level         uuid.UUID
}

func (q *Queries) GetBookByID(ctx context.Context, id uuid.UUID) (GetBookByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getBookByID, id)
	var i GetBookByIDRow
	err := row.Scan(
		&i.Name,
		&i.CoverImageUrl,
		&i.Review,
		pq.Array(&i.Tags),
		&i.Level,
	)
	return i, err
}

const getBooksByLevel = `-- name: GetBooksByLevel :many
select id, name, cover_image_url from books where books.level = (select id from book_level where book_level.level = $1)
`

type GetBooksByLevelRow struct {
	ID            uuid.UUID
	Name          string
	CoverImageUrl string
}

func (q *Queries) GetBooksByLevel(ctx context.Context, level string) ([]GetBooksByLevelRow, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByLevel, level)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksByLevelRow
	for rows.Next() {
		var i GetBooksByLevelRow
		if err := rows.Scan(&i.ID, &i.Name, &i.CoverImageUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLevelIDByName = `-- name: GetLevelIDByName :one
select id from book_level where level = $1
`

func (q *Queries) GetLevelIDByName(ctx context.Context, level string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getLevelIDByName, level)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getReviewByBookID = `-- name: GetReviewByBookID :one
select review, cover_image_url from books where id = $1
`

type GetReviewByBookIDRow struct {
	Review        string
	CoverImageUrl string
}

func (q *Queries) GetReviewByBookID(ctx context.Context, id uuid.UUID) (GetReviewByBookIDRow, error) {
	row := q.db.QueryRowContext(ctx, getReviewByBookID, id)
	var i GetReviewByBookIDRow
	err := row.Scan(&i.Review, &i.CoverImageUrl)
	return i, err
}

const removeBook = `-- name: RemoveBook :exec
delete from books where id = $1
`

func (q *Queries) RemoveBook(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeBook, id)
	return err
}

const updateBook = `-- name: UpdateBook :exec
update books
set name = $1, cover_image_url = $2,
review = $3, tags = $4, level = $5, updated_at = NOW()
where id = $6
`

type UpdateBookParams struct {
	Name          string
	CoverImageUrl string
	Review        string
	Tags          []string
	Level         uuid.UUID
	ID            uuid.UUID
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook,
		arg.Name,
		arg.CoverImageUrl,
		arg.Review,
		pq.Array(arg.Tags),
		arg.Level,
		arg.ID,
	)
	return err
}
