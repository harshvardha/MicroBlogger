// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: books.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
insert into books(
    id, name, cover_image_url,review,
    tags, level, created_at, updated_at
) values(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    NOW(),
    NOW()
)
returning id, name, cover_image_url, review, tags, level, created_at, updated_at
`

type CreateBookParams struct {
	Name          string
	CoverImageUrl string
	Review        string
	Tags          string
	Level         uuid.UUID
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Name,
		arg.CoverImageUrl,
		arg.Review,
		arg.Tags,
		arg.Level,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CoverImageUrl,
		&i.Review,
		&i.Tags,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllBooks = `-- name: GetAllBooks :many
select id, name, cover_image_url, review, tags, level, created_at, updated_at from books
`

func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CoverImageUrl,
			&i.Review,
			&i.Tags,
			&i.Level,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBooksCount = `-- name: GetAllBooksCount :one
select count(*) from books
`

func (q *Queries) GetAllBooksCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAllBooksCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getBooksByLevel = `-- name: GetBooksByLevel :many
select name, cover_image_url, review, tags from books where level = $1
`

type GetBooksByLevelRow struct {
	Name          string
	CoverImageUrl string
	Review        string
	Tags          string
}

func (q *Queries) GetBooksByLevel(ctx context.Context, level uuid.UUID) ([]GetBooksByLevelRow, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByLevel, level)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksByLevelRow
	for rows.Next() {
		var i GetBooksByLevelRow
		if err := rows.Scan(
			&i.Name,
			&i.CoverImageUrl,
			&i.Review,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeBook = `-- name: RemoveBook :exec
delete from books where id = $1
`

func (q *Queries) RemoveBook(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeBook, id)
	return err
}

const updateBook = `-- name: UpdateBook :one
update books
set name = $1, cover_image_url = $2,
review = $3, level = $4, updated_at = NOW()
where id = $5
returning id, name, cover_image_url, review, tags, level, created_at, updated_at
`

type UpdateBookParams struct {
	Name          string
	CoverImageUrl string
	Review        string
	Level         uuid.UUID
	ID            uuid.UUID
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook,
		arg.Name,
		arg.CoverImageUrl,
		arg.Review,
		arg.Level,
		arg.ID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CoverImageUrl,
		&i.Review,
		&i.Tags,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBookTags = `-- name: UpdateBookTags :one
update books set tags = $1 where id = $2
returning tags
`

type UpdateBookTagsParams struct {
	Tags string
	ID   uuid.UUID
}

func (q *Queries) UpdateBookTags(ctx context.Context, arg UpdateBookTagsParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateBookTags, arg.Tags, arg.ID)
	var tags string
	err := row.Scan(&tags)
	return tags, err
}
