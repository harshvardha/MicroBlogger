// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
insert into users(id, email, username, profile_pic_url, password, role_id, created_at, updated_at)
values(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    NOW(),
    NOW()
)
`

type CreateUserParams struct {
	Email         string
	Username      string
	ProfilePicUrl string
	Password      string
	RoleID        uuid.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.ProfilePicUrl,
		arg.Password,
		arg.RoleID,
	)
	return err
}

const getUserByEmailID = `-- name: GetUserByEmailID :one
select users.id, users.username, users.profile_pic_url, users.password, roles.role_name from users join roles on users.role_id = roles.id where users.email = $1
`

type GetUserByEmailIDRow struct {
	ID            uuid.UUID
	Username      string
	ProfilePicUrl string
	Password      string
	RoleName      string
}

func (q *Queries) GetUserByEmailID(ctx context.Context, email string) (GetUserByEmailIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailID, email)
	var i GetUserByEmailIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProfilePicUrl,
		&i.Password,
		&i.RoleName,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select 
    email, 
    username, 
    profile_pic_url, 
    created_at, 
    updated_at
    from users where id = $1
`

type GetUserByIDRow struct {
	Email         string
	Username      string
	ProfilePicUrl string
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.Email,
		&i.Username,
		&i.ProfilePicUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserRole = `-- name: GetUserRole :one
select role_id from users where users.id = $1
`

func (q *Queries) GetUserRole(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserRole, id)
	var role_id uuid.UUID
	err := row.Scan(&role_id)
	return role_id, err
}

const removeUser = `-- name: RemoveUser :exec
delete from users where id = $1
`

func (q *Queries) RemoveUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeUser, id)
	return err
}

const updateEmail = `-- name: UpdateEmail :exec
update users set email = $1, updated_at = NOW() where id = $2
`

type UpdateEmailParams struct {
	Email string
	ID    uuid.UUID
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.Email, arg.ID)
	return err
}

const updateOtherDetails = `-- name: UpdateOtherDetails :one
update users set username = $1, profile_pic_url = $2, updated_at = NOW() where id = $3
returning username, profile_pic_url
`

type UpdateOtherDetailsParams struct {
	Username      string
	ProfilePicUrl string
	ID            uuid.UUID
}

type UpdateOtherDetailsRow struct {
	Username      string
	ProfilePicUrl string
}

func (q *Queries) UpdateOtherDetails(ctx context.Context, arg UpdateOtherDetailsParams) (UpdateOtherDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, updateOtherDetails, arg.Username, arg.ProfilePicUrl, arg.ID)
	var i UpdateOtherDetailsRow
	err := row.Scan(&i.Username, &i.ProfilePicUrl)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
update users set password = $1, updated_at = NOW() where id = $2
`

type UpdatePasswordParams struct {
	Password string
	ID       uuid.UUID
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
	return err
}

const userExist = `-- name: UserExist :one
select exists(select 1 from users where email = $1)
`

func (q *Queries) UserExist(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userExist, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
