// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into users(id, email, username, profile_pic_url, password, role_id, created_at, updated_at)
values(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    NOW(),
    NOW()
)
returning id, username, profile_pic_url, role_id, created_at, updated_at
`

type CreateUserParams struct {
	Email         string
	Username      string
	ProfilePicUrl string
	Password      string
	RoleID        uuid.UUID
}

type CreateUserRow struct {
	ID            uuid.UUID
	Username      string
	ProfilePicUrl string
	RoleID        uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.ProfilePicUrl,
		arg.Password,
		arg.RoleID,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProfilePicUrl,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select 
    users.email, 
    users.username, 
    users.profile_pic_url, 
    users.created_at, 
    users.updated_at,
    roles.role_name from users join roles on users.role_id = roles.id where users.id = $1
`

type GetUserByIDRow struct {
	Email         string
	Username      string
	ProfilePicUrl string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	RoleName      string
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.Email,
		&i.Username,
		&i.ProfilePicUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleName,
	)
	return i, err
}

const removeUser = `-- name: RemoveUser :exec
delete from users where id = $1
`

func (q *Queries) RemoveUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeUser, id)
	return err
}

const updateEmail = `-- name: UpdateEmail :exec
update users set email = $1, updated_at = NOW() where id = $2
`

type UpdateEmailParams struct {
	Email string
	ID    uuid.UUID
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.Email, arg.ID)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
update users set password = $1, updated_at = NOW() where id = $2
`

type UpdatePasswordParams struct {
	Password string
	ID       uuid.UUID
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
	return err
}

const updateProfilePic = `-- name: UpdateProfilePic :one
update users set profile_pic_url = $1, updated_at = NOW() where id = $2
returning profile_pic_url
`

type UpdateProfilePicParams struct {
	ProfilePicUrl string
	ID            uuid.UUID
}

func (q *Queries) UpdateProfilePic(ctx context.Context, arg UpdateProfilePicParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateProfilePic, arg.ProfilePicUrl, arg.ID)
	var profile_pic_url string
	err := row.Scan(&profile_pic_url)
	return profile_pic_url, err
}

const updateUsername = `-- name: UpdateUsername :one
update users set username = $1, updated_at = NOW() where id = $2
returning username
`

type UpdateUsernameParams struct {
	Username string
	ID       uuid.UUID
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateUsername, arg.Username, arg.ID)
	var username string
	err := row.Scan(&username)
	return username, err
}
