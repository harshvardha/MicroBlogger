// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: book_level.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createLevel = `-- name: CreateLevel :one
insert into book_level(id, level, created_at, updated_at)
values(
    gen_random_uuid(),
    $1,
    NOW(),
    NOW()
)
returning id, level, created_at, updated_at
`

func (q *Queries) CreateLevel(ctx context.Context, level string) (BookLevel, error) {
	row := q.db.QueryRowContext(ctx, createLevel, level)
	var i BookLevel
	err := row.Scan(
		&i.ID,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllBookLevels = `-- name: GetAllBookLevels :many
select id, level, created_at, updated_at from book_level
`

func (q *Queries) GetAllBookLevels(ctx context.Context) ([]BookLevel, error) {
	rows, err := q.db.QueryContext(ctx, getAllBookLevels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookLevel
	for rows.Next() {
		var i BookLevel
		if err := rows.Scan(
			&i.ID,
			&i.Level,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeLevel = `-- name: RemoveLevel :exec
delete from book_level where id = $1
`

func (q *Queries) RemoveLevel(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeLevel, id)
	return err
}

const updateLevel = `-- name: UpdateLevel :one
update book_level set level = $1, updated_at = NOW() where id = $2
returning id, level, created_at, updated_at
`

type UpdateLevelParams struct {
	Level string
	ID    uuid.UUID
}

func (q *Queries) UpdateLevel(ctx context.Context, arg UpdateLevelParams) (BookLevel, error) {
	row := q.db.QueryRowContext(ctx, updateLevel, arg.Level, arg.ID)
	var i BookLevel
	err := row.Scan(
		&i.ID,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
